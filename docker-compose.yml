# Comando para el despliegue y agrupación por proyecto 
# docker compose -p taskmanager-node up -d

services:
  # ---------------------------------------------------
  # RabbitMQ (broker de colas) con UI web
  # ---------------------------------------------------
  rabbitmq:
    image: rabbitmq:3-management                   # Incluye interfaz web
    container_name: rabbitmq-task
    ports:
      - "5672:5672"                                # Puerto para conexión desde apps
      - "15672:15672"                              # Interfaz web http://localhost:15672
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin

  # ---------------------------------------------------
  # PostgreSQL (base de datos principal del sistema)
  # ---------------------------------------------------
  postgres:
    image: postgres:15                             # Imagen oficial de PostgreSQL
    container_name: postgres-task
    ports:
      - "5432:5432"                                # Puerto por defecto de PostgreSQL
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: task_manager_db
    volumes:
      - postgres_data:/var/lib/postgresql/data     # Persistencia de datos

  # ---------------------------------------------------
  # MongoDB (Guardar los eventos fallidos al publicar)
  # ---------------------------------------------------
  mongodb-failed:
    image: mongo:6
    container_name: mongodb-task-failed-event
    ports:
      - "27017:27017"
    volumes:
      - mongo_failed_data:/data/db

  # ---------------------------------------------------
  # MongoDB (Guardar los logs de los eventos realizados)
  # ---------------------------------------------------
  mongodb-logger:
    image: mongo:6
    container_name: mongodb-task-logger
    ports:
      - "27018:27017"
    volumes:
      - mongo_logger_data:/data/db

  # ---------------------------------------------------
  # Redis (almacenamiento en memoria - usado como cache o cola ligera)
  # ---------------------------------------------------
  redis:
    image: redis:7
    container_name: redis-task
    ports:
      - "6379:6379"

  # ---------------------------------------------------
  # Elasticsearch (almacenamiento de logs)
  # ---------------------------------------------------
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data

  # ---------------------------------------------------
  # Kibana (interfaz de visualización de logs)
  # ---------------------------------------------------
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"  # http://localhost:5601

  # ---------------------------------------------------
  # Logstash (procesamiento y parseo de logs)
  # ---------------------------------------------------
  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.1
    container_name: logstash
    depends_on:
      - elasticsearch
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"  # Puerto que escucha Filebeat

  # ---------------------------------------------------
  # Filebeat (lector de logs locales)
  # ---------------------------------------------------
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.12.1
    container_name: filebeat
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./logs:/app/logs:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./task-manager-node/logs:/app/task-manager-logs:ro
      - ./task-logger-node/logs:/app/task-logger-logs:ro
    depends_on:
      - logstash
    command: ["--strict.perms=false"]

  # ---------------------------------------------------
  # Prometheus (recolección de métricas)
  # ---------------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"  # Interfaz web http://localhost:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Archivo de configuración Prometheus
    depends_on:
      - rabbitmq
      - postgres
      - mongodb-failed
      - mongodb-logger
      - redis

  # ---------------------------------------------------
  # Grafana (visualización de métricas Prometheus)
  # ---------------------------------------------------
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "4000:3000"  # Interfaz web http://localhost:4000
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

# ---------------------------------------------------
# Volúmenes persistentes
# ---------------------------------------------------
volumes:
  postgres_data:
  mongo_failed_data:
  mongo_logger_data:
  es_data:
  grafana_data:
